diff --git a/include/zephyr/bluetooth/crypto.h b/include/zephyr/bluetooth/crypto.h
index 4a8a75d9cdf..bee76e70294 100644
--- a/include/zephyr/bluetooth/crypto.h
+++ b/include/zephyr/bluetooth/crypto.h
@@ -18,6 +18,8 @@
  * @{
  */
 
+#include <stddef.h>
+#include <stdint.h>
 #include <stdbool.h>
 
 #ifdef __cplusplus
diff --git a/tests/bluetooth/host/crypto/bt_encrypt_decrypt/CMakeLists.txt b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/CMakeLists.txt
new file mode 100644
index 00000000000..cc83710faa2
--- /dev/null
+++ b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/CMakeLists.txt
@@ -0,0 +1,15 @@
+# SPDX-License-Identifier: Apache-2.0
+
+cmake_minimum_required(VERSION 3.20.0)
+
+FILE(GLOB SOURCES src/*.c)
+
+project(bt_encrypt_decrypt)
+add_compile_definitions(test_unit_name="${PROJECT_NAME}")
+
+find_package(Zephyr COMPONENTS unittest REQUIRED HINTS $ENV{ZEPHYR_BASE})
+
+add_subdirectory(${ZEPHYR_BASE}/tests/bluetooth/host host_mocks)
+add_subdirectory(${ZEPHYR_BASE}/tests/bluetooth/host/crypto mocks)
+
+target_link_libraries(testbinary PRIVATE mocks host_mocks)
diff --git a/tests/bluetooth/host/crypto/bt_encrypt_decrypt/CMakeLists.txt:Zone.Identifier b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/CMakeLists.txt:Zone.Identifier
new file mode 100644
index 00000000000..a45e1ac4c0c
--- /dev/null
+++ b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/CMakeLists.txt:Zone.Identifier
@@ -0,0 +1,2 @@
+[ZoneTransfer]
+ZoneId=3
diff --git a/tests/bluetooth/host/crypto/bt_encrypt_decrypt/prj.conf b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/prj.conf
new file mode 100644
index 00000000000..c0dad049caf
--- /dev/null
+++ b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/prj.conf
@@ -0,0 +1,13 @@
+CONFIG_ZTEST=y
+CONFIG_ZTEST_NEW_API=y
+CONFIG_BT=y
+CONFIG_BT_CENTRAL=y
+CONFIG_BT_MAX_PAIRED=7
+CONFIG_ASSERT=y
+CONFIG_ASSERT_LEVEL=2
+CONFIG_ASSERT_VERBOSE=y
+CONFIG_ASSERT_ON_ERRORS=y
+
+CONFIG_LOG=n
+CONFIG_BT_DEBUG_LOG=n
+CONFIG_TEST_LOGGING_DEFAULTS=n
diff --git a/tests/bluetooth/host/crypto/bt_encrypt_decrypt/prj.conf:Zone.Identifier b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/prj.conf:Zone.Identifier
new file mode 100644
index 00000000000..a45e1ac4c0c
--- /dev/null
+++ b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/prj.conf:Zone.Identifier
@@ -0,0 +1,2 @@
+[ZoneTransfer]
+ZoneId=3
diff --git a/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/main.c b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/main.c
new file mode 100644
index 00000000000..ede89a4f367
--- /dev/null
+++ b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/main.c
@@ -0,0 +1,144 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#include <zephyr/kernel.h>
+#include <zephyr/fff.h>
+#include <host/crypto.h>
+#include "mocks/aes.h"
+#include "mocks/hci_core.h"
+#include "mocks/hci_core_expects.h"
+#include "mocks/hmac_prng.h"
+#include "mocks/hmac_prng_expects.h"
+#include "mocks/crypto_help_utils.h"
+
+DEFINE_FFF_GLOBALS;
+
+static void fff_reset_rule_before(const struct ztest_unit_test *test, void *fixture)
+{
+	HCI_CORE_FFF_FAKES_LIST(RESET_FAKE);
+	HMAC_PRNG_FFF_FAKES_LIST(RESET_FAKE);
+	AES_FFF_FAKES_LIST(RESET_FAKE);
+}
+
+static int custom_tc_aes_encrypt(uint8_t *enc_data, const uint8_t *input, const TCAesKeySched_t *key) {
+    static uint8_t fake_enc_data[16] = {0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb,
+		0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32};
+    memcpy(enc_data, fake_enc_data, sizeof(fake_enc_data));
+    return TC_CRYPTO_SUCCESS;
+}
+
+ZTEST_RULE(fff_reset_rule, fff_reset_rule_before, NULL);
+
+ZTEST_SUITE(bt_encrypt_decrypt, NULL, NULL, NULL, NULL, NULL);
+
+/*
+ *  Test bt_encrypt_le() succeeds
+ *
+ *  Constraints:
+ *   - tc_aes128_set_encrypt_key() succeeds and 'TC_CRYPTO_SUCCESS'.
+ *   - tc_aes_encrypt() succeeds and returns 'TC_CRYPTO_SUCCESS'.
+ *   - tc_aes_encrypt() sets the value of encrypted text to a NIST defined known vector
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_le() returns 0 (success)
+ *   - bt_encrypt_le() resulting cipher text buffer matches the expectation
+ */
+ZTEST(bt_encrypt_decrypt, test_bt_encrypt_decrypt_succeeds)
+{
+  const uint8_t key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
+		0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
+
+  const uint8_t pt[] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d,
+		0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
+
+  uint8_t ct[16];
+
+	tc_aes_encrypt_fake.custom_fake = custom_tc_aes_encrypt;
+  tc_aes128_set_encrypt_key_fake.return_val = TC_CRYPTO_SUCCESS;
+  tc_aes_encrypt_fake.return_val = TC_CRYPTO_SUCCESS;
+
+	//NOTE: Reversed byte order for le
+  uint8_t expected_ct[] = {0x32, 0x0b, 0x6a, 0x19, 0x97, 0x85, 0x11, 0xdc, 0xfb, 0x09, 0xdc, 0x02, 0x1d, 0x84, 0x25, 0x39
+};
+
+
+  int retval = bt_encrypt_le(key, pt, ct);
+  TC_PRINT("bt_encrypt_le result: %d\n", retval);
+  zassert_equal(0, retval);
+  for(int i = 0; i < 16; i++){
+	TC_PRINT("expected: %u, actual: %u\n", expected_ct[i] ,ct[i]);
+  }
+    zassert_mem_equal(ct, expected_ct, sizeof(ct),
+                    "Expected and actual CTs don't match!");
+}
+
+/*
+ *  Test bt_encrypt_be() succeeds
+ *
+ *  Constraints:
+ *   - tc_aes128_set_encrypt_key() succeeds and 'TC_CRYPTO_SUCCESS'.
+ *   - tc_aes_encrypt() succeeds and returns 'TC_CRYPTO_SUCCESS'.
+ *   - tc_aes_encrypt() sets the value of encrypted text to a NIST defined known vector
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_be() returns 0 (success)
+ *   - bt_encrypt_be() resulting cipher text buffer matches the expectation
+ */
+ZTEST(bt_encrypt_decrypt, test_bt_encrypt_be_succeeds)
+{
+  const uint8_t key[] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
+		0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
+
+  const uint8_t pt[] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d,
+		0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
+
+  uint8_t ct[16];
+
+	tc_aes_encrypt_fake.custom_fake = custom_tc_aes_encrypt;
+  tc_aes128_set_encrypt_key_fake.return_val = TC_CRYPTO_SUCCESS;
+  tc_aes_encrypt_fake.return_val = TC_CRYPTO_SUCCESS;
+
+	//NOTE: 'Normal' byte order for be
+  uint8_t expected_ct[] = {0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb,
+		0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32
+};
+
+
+  int retval = bt_encrypt_be(key, pt, ct);
+  TC_PRINT("bt_encrypt_be result: %d\n", retval);
+  zassert_equal(0, retval);
+  for(int i = 0; i < 16; i++){
+	TC_PRINT("expected: %u, actual: %u\n", expected_ct[i] ,ct[i]);
+  }
+    zassert_mem_equal(ct, expected_ct, sizeof(ct),
+                    "Expected and actual CTs don't match!");
+}
+
+ZTEST(bt_encrypt_decrypt, test_bt_rand_succeeds){
+	uint8_t rand_buf[16];
+	const size_t rand_length = sizeof(rand_buf);
+
+	tc_hmac_prng_generate_fake.return_val = TC_CRYPTO_SUCCESS;
+
+	int retval = bt_rand(rand_buf, rand_length);
+
+	zassert_equal(0, retval);
+}
+
+ZTEST(bt_encrypt_decrypt, test_bt_rand_succeeds_reseed){
+	uint8_t rand_buf[16];
+	const size_t rand_length = sizeof(rand_buf);
+
+	int prng_gen_retvals[] = {TC_HMAC_PRNG_RESEED_REQ, TC_CRYPTO_SUCCESS};
+	SET_RETURN_SEQ(tc_hmac_prng_generate, prng_gen_retvals, 2);
+
+	bt_hci_le_rand_fake.return_val = 0;
+	tc_hmac_prng_reseed_fake.return_val = TC_CRYPTO_SUCCESS;
+
+	int retval = bt_rand(rand_buf, rand_length);
+	TC_PRINT("bt_rand result: %d\n", retval);
+	zassert_equal(0, retval);
+}
diff --git a/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/main.c:Zone.Identifier b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/main.c:Zone.Identifier
new file mode 100644
index 00000000000..a45e1ac4c0c
--- /dev/null
+++ b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/main.c:Zone.Identifier
@@ -0,0 +1,2 @@
+[ZoneTransfer]
+ZoneId=3
diff --git a/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/test_suite_invalid_inputs.c b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/test_suite_invalid_inputs.c
new file mode 100644
index 00000000000..37a80773500
--- /dev/null
+++ b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/test_suite_invalid_inputs.c
@@ -0,0 +1,301 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#include <zephyr/kernel.h>
+#include <host/crypto.h>
+#include "mocks/aes.h"
+#include "mocks/hci_core.h"
+#include "mocks/hci_core_expects.h"
+#include "mocks/hmac_prng.h"
+#include "mocks/hmac_prng_expects.h"
+#include "mocks/crypto_help_utils.h"
+#include "host_mocks/assert.h"
+
+ZTEST_SUITE(bt_encrypt_decrypt_invalid_cases, NULL, NULL, NULL, NULL, NULL);
+
+/*
+ *  Test bt_encrypt_le() hits an assertion when key buffer is NULL
+ *
+ *  Constraints:
+ *   - key argument is NULL
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_le() hits an assertion
+ */
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_null_key){
+	const uint8_t pt[16];
+	uint8_t ct[16];
+	
+	expect_assert();
+	bt_encrypt_le(NULL, pt, ct);
+
+	/* Should not reach this point */
+	zassert_unreachable(NULL);
+}
+
+/*
+ *  Test bt_encrypt_le() hits an assertion when plaintext buffer is NULL
+ *
+ *  Constraints:
+ *   - plaintext argument is NULL
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_le() hits an assertion
+ */
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_null_pt){
+	const uint8_t key[16];
+	uint8_t ct[16];
+	
+	expect_assert();
+	bt_encrypt_le(key, NULL, ct);
+
+	/* Should not reach this point */
+	zassert_unreachable(NULL);
+}
+
+/*
+ *  Test bt_encrypt_le() hits an assertion when enc_data buffer is NULL
+ *
+ *  Constraints:
+ *   - enc_data argument is NULL
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_le() hits an assertion
+ */
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_null_ct){
+	const uint8_t key[16];
+	const uint8_t pt[16];
+	
+	expect_assert();
+	bt_encrypt_le(key, pt, NULL);
+
+	/* Should not reach this point */
+	zassert_unreachable(NULL);
+}
+
+/*
+ *  Test bt_encrypt_be() hits an assertion when key buffer is NULL
+ *
+ *  Constraints:
+ *   - key argument is NULL
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_be() hits an assertion
+ */
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_null_key_be){
+	const uint8_t pt[16];
+	uint8_t ct[16];
+	
+	expect_assert();
+	bt_encrypt_be(NULL, pt, ct);
+
+	/* Should not reach this point */
+	zassert_unreachable(NULL);
+}
+
+/*
+ *  Test bt_encrypt_be() hits an assertion when plaintext buffer is NULL
+ *
+ *  Constraints:
+ *   - plaintext argument is NULL
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_be() hits an assertion
+ */
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_null_pt_be){
+	const uint8_t key[16];
+	uint8_t ct[16];
+	
+	expect_assert();
+	bt_encrypt_be(key, NULL, ct);
+
+	/* Should not reach this point */
+	zassert_unreachable(NULL);
+}
+
+/*
+ *  Test bt_encrypt_be() hits an assertion when enc_data buffer is NULL
+ *
+ *  Constraints:
+ *   - enc_data argument is NULL
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_be() hits an assertion
+ */
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_null_ct_be){
+	const uint8_t key[16];
+	const uint8_t pt[16];
+	
+	expect_assert();
+	bt_encrypt_be(key, pt, NULL);
+
+	/* Should not reach this point */
+	zassert_unreachable(NULL);
+}
+
+/*
+ *  Test bt_encrypt_le() fails when tc_aes128_set_encrypt_key() fails
+ *
+ *  Constraints:
+ *   - tc_aes128_set_encrypt_key() fails and returns a 'TC_CRYPTO_FAIL' error code.
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_le() returns a negative error code (failure)
+ */
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_set_key_fail_le)
+{
+	const uint8_t key[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
+                         0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF};
+
+  const uint8_t pt[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
+                        0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF};
+
+  uint8_t ct[16];
+
+  tc_aes128_set_encrypt_key_fake.return_val = TC_CRYPTO_FAIL;
+
+  zassert_equal(-EINVAL, bt_encrypt_le(key, pt, ct));
+}
+
+/*
+ *  Test bt_encrypt_le() fails when tc_aes_encrypt() fails
+ *
+ *  Constraints:
+ *   - tc_aes128_set_encrypt_key() succeeds and returns a 'TC_CRYPTO_SUCCESS'.
+ *   - tc_aes_encrypt() fails and returns a 'TC_CRYPTO_FAIL' error code.
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_le() returns a negative error code (failure)
+ */
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_encrypt_le_fail)
+{
+	AES_FFF_FAKES_LIST(RESET_FAKE);
+	const uint8_t key[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
+                         0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF};
+
+  const uint8_t pt[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
+                        0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF};
+
+  uint8_t ct[16];
+
+  tc_aes128_set_encrypt_key_fake.return_val = TC_CRYPTO_SUCCESS;
+  tc_aes_encrypt_fake.return_val = TC_CRYPTO_FAIL;
+
+int retval = bt_encrypt_le(key, pt, ct);
+  TC_PRINT("bt_encrypt_be result: %d\n", retval);
+  zassert_equal(-EINVAL, retval);
+}
+
+/*
+ *  Test bt_encrypt_be() fails when tc_aes128_set_encrypt_key() fails
+ *
+ *  Constraints:
+ *   - tc_aes128_set_encrypt_key() fails and returns a 'TC_CRYPTO_FAIL' error code.
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_be() returns a negative error code (failure)
+ */
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_set_key_fail_be)
+{
+	const uint8_t key[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
+                         0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF};
+
+  const uint8_t pt[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
+                        0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF};
+
+  uint8_t ct[16];
+
+  tc_aes128_set_encrypt_key_fake.return_val = TC_CRYPTO_FAIL;
+
+  zassert_equal(-EINVAL, bt_encrypt_be(key, pt, ct));
+}
+
+/*
+ *  Test bt_encrypt_be() fails when tc_aes_encrypt() fails
+ *
+ *  Constraints:
+ *   - tc_aes128_set_encrypt_key() succeeds and returns a 'TC_CRYPTO_SUCCESS'.
+ *   - tc_aes_encrypt() fails and returns a 'TC_CRYPTO_FAIL' error code.
+ *
+ *  Expected behaviour:
+ *   - bt_encrypt_be() returns a negative error code (failure)
+ */
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_encrypt_be_fail)
+{
+	AES_FFF_FAKES_LIST(RESET_FAKE);
+	const uint8_t key[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
+                         0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF};
+
+  const uint8_t pt[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF,
+                        0xDE, 0xAD, 0xBE, 0xEF, 0xDE, 0xAD, 0xBE, 0xEF};
+
+  uint8_t ct[16];
+
+  tc_aes128_set_encrypt_key_fake.return_val = TC_CRYPTO_SUCCESS;
+  tc_aes_encrypt_fake.return_val = TC_CRYPTO_FAIL;
+
+  zassert_equal(-EINVAL, bt_encrypt_be(key, pt, ct));
+}
+
+/*
+ *  Test bt_rand() fails when tc_aes_encrypt() fails
+ *
+ *  Constraints:
+ *   - tc_aes128_set_encrypt_key() succeeds and returns a 'TC_CRYPTO_SUCCESS'.
+ *   - tc_aes_encrypt() fails and returns a 'TC_CRYPTO_FAIL' error code.
+ *
+ *  Expected behaviour:
+ *   - bt_rand() returns a negative error code (failure)
+ */
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_encrypt_bt_rand_null_buf)
+{
+	const size_t rand_length;
+	
+	expect_assert();
+	bt_rand(NULL, rand_length);
+
+	/* Should not reach this point */
+	zassert_unreachable(NULL);
+}
+
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_encrypt_bt_rand_zero_size)
+{
+	uint8_t rand_buf[16];
+	const size_t rand_length = 0;
+	
+	expect_assert();
+	bt_rand(rand_buf, rand_length);
+
+	/* Should not reach this point */
+	zassert_unreachable(NULL);
+}
+
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_encrypt_bt_rand_prng_generate_fail)
+{
+	uint8_t rand_buf[16];
+	const size_t rand_length = sizeof(rand_buf);
+	
+	tc_hmac_prng_generate_fake.return_val = TC_CRYPTO_FAIL;
+
+	int retval = bt_rand(rand_buf, rand_length);
+
+	zassert_equal(-EIO, retval);
+}
+
+ZTEST(bt_encrypt_decrypt_invalid_cases, test_bt_rand_fail_reseed){
+	uint8_t rand_buf[16];
+	const size_t rand_length = sizeof(rand_buf);
+
+	int prng_gen_retvals[] = {TC_HMAC_PRNG_RESEED_REQ, TC_CRYPTO_SUCCESS};
+	SET_RETURN_SEQ(tc_hmac_prng_generate, prng_gen_retvals, 2);
+
+	bt_hci_le_rand_fake.return_val = 0;
+	tc_hmac_prng_reseed_fake.return_val = TC_CRYPTO_FAIL;
+
+	int retval = bt_rand(rand_buf, rand_length);
+	TC_PRINT("bt_rand result: %d\n", retval);
+	zassert_equal(-EIO, retval);
+}
\ No newline at end of file
diff --git a/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/test_suite_invalid_inputs.c:Zone.Identifier b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/test_suite_invalid_inputs.c:Zone.Identifier
new file mode 100644
index 00000000000..a45e1ac4c0c
--- /dev/null
+++ b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/src/test_suite_invalid_inputs.c:Zone.Identifier
@@ -0,0 +1,2 @@
+[ZoneTransfer]
+ZoneId=3
diff --git a/tests/bluetooth/host/crypto/bt_encrypt_decrypt/testcase.yaml b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/testcase.yaml
new file mode 100644
index 00000000000..e68ab3232c1
--- /dev/null
+++ b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/testcase.yaml
@@ -0,0 +1,5 @@
+common:
+  tags: test_framework bluetooth host
+tests:
+  bluetooth.host.bt_encrypt_decrypt.default:
+    type: unit
diff --git a/tests/bluetooth/host/crypto/bt_encrypt_decrypt/testcase.yaml:Zone.Identifier b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/testcase.yaml:Zone.Identifier
new file mode 100644
index 00000000000..a45e1ac4c0c
--- /dev/null
+++ b/tests/bluetooth/host/crypto/bt_encrypt_decrypt/testcase.yaml:Zone.Identifier
@@ -0,0 +1,2 @@
+[ZoneTransfer]
+ZoneId=3
